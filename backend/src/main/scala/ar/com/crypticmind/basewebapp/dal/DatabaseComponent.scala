package ar.com.crypticmind.basewebapp.dal

import com.googlecode.mapperdao._
import ar.com.crypticmind.basewebapp.model._
import ar.com.crypticmind.basewebapp.core.SettingsComponent
import com.mchange.v2.c3p0.ComboPooledDataSource
import com.googlecode.mapperdao.utils.Setup
import scala.reflect.runtime.universe
import com.googlecode.mapperdao.utils.Database.DriverConfiguration


trait DatabaseComponent { this: SettingsComponent =>


  object database {

    object UserEntity extends Entity[Long, SurrogateLongAndNaturalLongId, User] {
      val id        = key("id") autogenerated(_.id)
      val username  = column("username") to(_.username)
      def constructor(implicit m: ValuesMap) = new User(id, username) with Stored
    }

    val dataSource = new ComboPooledDataSource

    val runtimeMirror = universe.runtimeMirror(this.getClass.getClassLoader)

    val module = runtimeMirror.staticModule("com.googlecode.mapperdao.utils.Database.H2")
    val driverConfiguration = runtimeMirror.reflectModule(module)
    val driver = driverConfiguration.instance.asInstanceOf[DriverConfiguration]

    val (_, mapperDao, queryDao, txManager) = Setup.apply(driver, dataSource, List(UserEntity))

  }

}
